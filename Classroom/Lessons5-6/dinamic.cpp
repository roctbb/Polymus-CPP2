
/*Объяснение динамической памяти. */


#include <iostream>
#include <ctime>

using namespace std;


/* Часть первая. Указатели. Операция взятия адреса & и операция разыменования указателя */

void firstPart()
{
    int x;
    x = 13;
    int *ptr; //инициализация указателя
    ptr= &x; // присвоили адрес переменной указателю
    cout << "&x    = " << &x << endl;// вывод адреса переменной x, извлечённого операцией взятия адреса
    cout << "ptr  = " << ptr << endl;// вывод адреса переменной x, являющегося значением указателя ptr
    cout << "x     = " << x << endl; // вывод значения переменной x
    cout << "*ptr = " << *ptr << endl; // вывод значения переменной x через указатель с помощью операции разыменования указателя
}

/* Часть вторая. Динамическое выделение памяти. Высвобождение памяти. Операторы new и delete.
   Нравоучительная история о важности освобождения памяти*/

void secondPart()
{
    int *ptr = new int; // динамическое выделение памяти под объект типа int
    *ptr = 13; // инициализация объекта через указатель
    cout << "ptr = " << *ptr << endl;
    delete ptr; // освобождение памяти
}

/* Часть третья. Одномерный динамический массив. */

void thirdPart(int numberOfElements)
{
    int *ptr = new int[numberOfElements]; // динамическое выделение памяти под массив объектов типа int
    srand(time(0));
    for(int i = 0; i < numberOfElements; i++) //заполнение элементов массива случайными числами
    {
        ptr[i] = (rand() % 9 + 1);
        cout << ptr[i]<<" "; //
    }
    delete [] ptr; //освобождение памяти

}

/* Часть четвертая. Написать свой вектор */

int main()
{
    firstPart();
    secondPart();
    thirdPart(13);
    return 0;
}
